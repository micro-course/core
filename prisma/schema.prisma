// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Course {
  id          String @id @default(cuid())
  name        String
  description String
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  role          ROLE      @default(USER)
  name          String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ROLE {
  ADMIN
  USER
}

model MapNode {
  id         String             @id @default(cuid())
  x          Float
  y          Float
  width      Int                @default(100)
  height     Int                @default(100)
  rotation   Int                @default(0)
  scale      Float              @default(1)
  hidden     Boolean
  zIndex     Int?
  courseData MapNodeCourseData?
  imageData  MapNodeImageData?
}

model MapNodeCourseData {
  id        String   @id @default(cuid())
  courseId  String   @unique
  mapNode   MapNode? @relation(fields: [mapNodeId], references: [id], onDelete: Cascade)
  mapNodeId String?  @unique
}

model MapNodeImageData {
  id        String   @id @default(cuid())
  src       String
  mapNode   MapNode? @relation(fields: [mapNodeId], references: [id], onDelete: Cascade)
  mapNodeId String?  @unique
}

model Product {
  id        String      @id @default(cuid())
  type      ProductType
  sku       String
  name      String
  price     Int
  quantity  Int
  paymentId String
  payment   Payment     @relation(fields: [paymentId], references: [id])
}

enum ProductType {
  course
}

model Payment {
  id        String        @id @default(cuid())
  userId    String
  userEmail String
  products  Product[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  state    PaymentState
}

enum PaymentState {
  pending
  success
  failed
}

model UserAccess {
  id        String        @id @default(cuid())
  userId    String
  adminId   String?
  courseId  String
  type UserAccessType
  reason UserAccessReason
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

enum UserAccessType {
  course
}

enum UserAccessReason {
  paid
  free
  manual
}