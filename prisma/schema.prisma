// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  role          ROLE      @default(USER)
  name          String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ROLE {
  ADMIN
  USER
}

model MapNode {
  id         String             @id @default(cuid())
  x          Float
  y          Float
  width      Int                @default(100)
  height     Int                @default(100)
  rotation   Int                @default(0)
  scale      Float              @default(1)
  hidden     Boolean
  zIndex     Int?
  courseData MapNodeCourseData?
  imageData  MapNodeImageData?
}

model MapNodeCourseData {
  id        String   @id @default(cuid())
  courseId  String   @unique
  mapNode   MapNode? @relation(fields: [mapNodeId], references: [id], onDelete: Cascade)
  mapNodeId String?  @unique
}

model MapNodeImageData {
  id        String   @id @default(cuid())
  src       String
  mapNode   MapNode? @relation(fields: [mapNodeId], references: [id], onDelete: Cascade)
  mapNodeId String?  @unique
}

// Course entity

model Course {
  id                 String             @id @default(cuid())
  slug               String             @unique
  title              String
  thumbnail          String
  image              String
  draft              Boolean
  dependencies       CourseDependency[] @relation("CourseDependencies")
  dependents         CourseDependency[] @relation("CourseDependents")
  product            CourseProduct?
  lessons            Lesson[]
  landing            String?
  shortDescription   String?
  shortDescriptionId String?
}

model Lesson {
  id                 String         @id @default(cuid())
  slug               String
  courseId           String
  course             Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  title              String
  shortDescription   String?
  shortDescriptionId String?
  blocks             ContentBlock[]
}

model ContentBlock {
  id       String    @id @default(cuid())
  type     BlockType
  text     String?
  lessonId String
  lesson   Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
}

model CourseDependency {
  id          String @id @default(cuid())
  courseId    String
  dependsOnId String

  course    Course @relation("CourseDependencies", fields: [courseId], references: [id], onDelete: Cascade)
  dependsOn Course @relation("CourseDependents", fields: [dependsOnId], references: [id], onDelete: Cascade)

  @@unique([courseId, dependsOnId])
}

enum BlockType {
  text
}

enum AccessType {
  free
  paid
}

model CourseProduct {
  id       String     @id @default(cuid())
  access   AccessType
  price    Int?
  course   Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String     @unique
}

model MdxText {
  id         String  @id @default(cuid())
  text       String
  type       MdxType
  relationId String
  version    Int
}

enum MdxType {
  courseLanding
  courseShortDescription
  contentBlockText
  lessonShortDescription
}
